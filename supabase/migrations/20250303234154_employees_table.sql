create table "public"."alembic_version" (
    "version_num" character varying(32) not null
);


create table "public"."medications" (
    "id" bigint generated by default as identity not null,
    "profile_id" uuid not null,
    "title" character varying(255),
    "scan_date" timestamp without time zone,
    "active_ingredients" text,
    "scanned_text" text,
    "dosage" character varying(255),
    "prescription_details" json,
    "scan_url" text,
    "created_at" timestamp without time zone,
    "updated_at" timestamp without time zone
);


alter table "public"."medications" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "username" text,
    "bio" text,
    "created_at" timestamp without time zone,
    "updated_at" timestamp without time zone
);


alter table "public"."profiles" enable row level security;

CREATE UNIQUE INDEX alembic_version_pkc ON public.alembic_version USING btree (version_num);

CREATE INDEX idx_medications_profile_id ON public.medications USING btree (profile_id);

CREATE INDEX idx_medications_scan_date ON public.medications USING btree (scan_date);

CREATE INDEX idx_medications_title ON public.medications USING btree (title);

CREATE INDEX idx_profile_display_name ON public.profiles USING btree (username);

CREATE UNIQUE INDEX ix_profile_user_id ON public.profiles USING btree (id);

CREATE UNIQUE INDEX medications_pkey ON public.medications USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

alter table "public"."alembic_version" add constraint "alembic_version_pkc" PRIMARY KEY using index "alembic_version_pkc";

alter table "public"."medications" add constraint "medications_pkey" PRIMARY KEY using index "medications_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."medications" add constraint "medications_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) not valid;

alter table "public"."medications" validate constraint "medications_profile_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

grant delete on table "public"."alembic_version" to "anon";

grant insert on table "public"."alembic_version" to "anon";

grant references on table "public"."alembic_version" to "anon";

grant select on table "public"."alembic_version" to "anon";

grant trigger on table "public"."alembic_version" to "anon";

grant truncate on table "public"."alembic_version" to "anon";

grant update on table "public"."alembic_version" to "anon";

grant delete on table "public"."alembic_version" to "authenticated";

grant insert on table "public"."alembic_version" to "authenticated";

grant references on table "public"."alembic_version" to "authenticated";

grant select on table "public"."alembic_version" to "authenticated";

grant trigger on table "public"."alembic_version" to "authenticated";

grant truncate on table "public"."alembic_version" to "authenticated";

grant update on table "public"."alembic_version" to "authenticated";

grant delete on table "public"."alembic_version" to "service_role";

grant insert on table "public"."alembic_version" to "service_role";

grant references on table "public"."alembic_version" to "service_role";

grant select on table "public"."alembic_version" to "service_role";

grant trigger on table "public"."alembic_version" to "service_role";

grant truncate on table "public"."alembic_version" to "service_role";

grant update on table "public"."alembic_version" to "service_role";

grant delete on table "public"."medications" to "anon";

grant insert on table "public"."medications" to "anon";

grant references on table "public"."medications" to "anon";

grant select on table "public"."medications" to "anon";

grant trigger on table "public"."medications" to "anon";

grant truncate on table "public"."medications" to "anon";

grant update on table "public"."medications" to "anon";

grant delete on table "public"."medications" to "authenticated";

grant insert on table "public"."medications" to "authenticated";

grant references on table "public"."medications" to "authenticated";

grant select on table "public"."medications" to "authenticated";

grant trigger on table "public"."medications" to "authenticated";

grant truncate on table "public"."medications" to "authenticated";

grant update on table "public"."medications" to "authenticated";

grant delete on table "public"."medications" to "service_role";

grant insert on table "public"."medications" to "service_role";

grant references on table "public"."medications" to "service_role";

grant select on table "public"."medications" to "service_role";

grant trigger on table "public"."medications" to "service_role";

grant truncate on table "public"."medications" to "service_role";

grant update on table "public"."medications" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

create policy "delete_own_medications"
on "public"."medications"
as permissive
for delete
to public
using ((auth.uid() = profile_id));


create policy "insert_own_medications"
on "public"."medications"
as permissive
for insert
to public
with check ((auth.uid() = profile_id));


create policy "select_own_medications"
on "public"."medications"
as permissive
for select
to public
using ((auth.uid() = profile_id));


create policy "service_role_access_medications"
on "public"."medications"
as permissive
for all
to service_role
using (true);


create policy "supabase_admin_access_medications"
on "public"."medications"
as permissive
for all
to supabase_admin
using (true);


create policy "update_own_medications"
on "public"."medications"
as permissive
for update
to public
using ((auth.uid() = profile_id));


create policy "insert_own_profile"
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "select_own_profile"
on "public"."profiles"
as permissive
for select
to public
using ((auth.uid() = id));


create policy "service_role_access_profiles"
on "public"."profiles"
as permissive
for all
to service_role
using (true);


create policy "supabase_admin_access_profiles"
on "public"."profiles"
as permissive
for all
to supabase_admin
using (true);


create policy "update_own_profile"
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));
