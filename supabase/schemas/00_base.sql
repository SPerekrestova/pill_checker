SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgsodium";
COMMENT ON SCHEMA "public" IS 'standard public schema';
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
SET default_tablespace = '';
SET default_table_access_method = "heap";
CREATE TABLE IF NOT EXISTS "public"."alembic_version" (
    "version_num" character varying(32) NOT NULL
);
ALTER TABLE "public"."alembic_version" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."medications" (
    "id" bigint NOT NULL,
    "profile_id" "uuid" NOT NULL,
    "title" character varying(255),
    "scan_date" timestamp without time zone,
    "active_ingredients" "text",
    "scanned_text" "text",
    "dosage" character varying(255),
    "prescription_details" "json",
    "scan_url" "text",
    "created_at" timestamp without time zone,
    "updated_at" timestamp without time zone
);
ALTER TABLE ONLY "public"."medications" FORCE ROW LEVEL SECURITY;
ALTER TABLE "public"."medications" OWNER TO "postgres";
COMMENT ON COLUMN "public"."medications"."profile_id" IS 'ID of the profile this medication belongs to';
COMMENT ON COLUMN "public"."medications"."title" IS 'Name or title of the medication';
COMMENT ON COLUMN "public"."medications"."scan_date" IS 'Date when the medication was scanned';
COMMENT ON COLUMN "public"."medications"."active_ingredients" IS 'List of active ingredients in text format';
COMMENT ON COLUMN "public"."medications"."scanned_text" IS 'Raw text extracted from the medication scan';
COMMENT ON COLUMN "public"."medications"."dosage" IS 'Dosage information';
COMMENT ON COLUMN "public"."medications"."prescription_details" IS 'Additional prescription details in JSON format';
COMMENT ON COLUMN "public"."medications"."scan_url" IS 'URL of the uploaded medication scan';
ALTER TABLE "public"."medications" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."medications_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);
CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "username" "text",
    "bio" "text",
    "created_at" timestamp without time zone,
    "updated_at" timestamp without time zone,
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);
ALTER TABLE ONLY "public"."profiles" FORCE ROW LEVEL SECURITY;
ALTER TABLE "public"."profiles" OWNER TO "postgres";
COMMENT ON COLUMN "public"."profiles"."id" IS 'UUID of the associated Supabase user';
COMMENT ON COLUMN "public"."profiles"."username" IS 'Display name of the user';
COMMENT ON COLUMN "public"."profiles"."bio" IS 'User''s biography or description';
ALTER TABLE ONLY "public"."alembic_version"
    ADD CONSTRAINT "alembic_version_pkc" PRIMARY KEY ("version_num");
ALTER TABLE ONLY "public"."medications"
    ADD CONSTRAINT "medications_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");
CREATE INDEX "idx_medications_profile_id" ON "public"."medications" USING "btree" ("profile_id");
CREATE INDEX "idx_medications_scan_date" ON "public"."medications" USING "btree" ("scan_date");
CREATE INDEX "idx_medications_title" ON "public"."medications" USING "btree" ("title");
CREATE INDEX "idx_profile_display_name" ON "public"."profiles" USING "btree" ("username");
CREATE UNIQUE INDEX "ix_profile_user_id" ON "public"."profiles" USING "btree" ("id");
ALTER TABLE ONLY "public"."medications"
    ADD CONSTRAINT "medications_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id");
CREATE POLICY "delete_own_medications" ON "public"."medications" FOR DELETE USING (("auth"."uid"() = "profile_id"));
CREATE POLICY "insert_own_medications" ON "public"."medications" FOR INSERT WITH CHECK (("auth"."uid"() = "profile_id"));
CREATE POLICY "insert_own_profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));
ALTER TABLE "public"."medications" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "select_own_medications" ON "public"."medications" FOR SELECT USING (("auth"."uid"() = "profile_id"));
CREATE POLICY "select_own_profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));
CREATE POLICY "service_role_access_medications" ON "public"."medications" TO "service_role" USING (true);
CREATE POLICY "service_role_access_profiles" ON "public"."profiles" TO "service_role" USING (true);
CREATE POLICY "supabase_admin_access_medications" ON "public"."medications" TO "supabase_admin" USING (true);
CREATE POLICY "supabase_admin_access_profiles" ON "public"."profiles" TO "supabase_admin" USING (true);
CREATE POLICY "update_own_medications" ON "public"."medications" FOR UPDATE USING (("auth"."uid"() = "profile_id"));
CREATE POLICY "update_own_profile" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));
ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT ALL ON TABLE "public"."alembic_version" TO "anon";
GRANT ALL ON TABLE "public"."alembic_version" TO "authenticated";
GRANT ALL ON TABLE "public"."alembic_version" TO "service_role";
GRANT ALL ON TABLE "public"."medications" TO "anon";
GRANT ALL ON TABLE "public"."medications" TO "authenticated";
GRANT ALL ON TABLE "public"."medications" TO "service_role";
GRANT ALL ON SEQUENCE "public"."medications_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."medications_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."medications_id_seq" TO "service_role";
GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";
RESET ALL;
